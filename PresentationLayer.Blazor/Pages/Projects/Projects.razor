@page "/projects"

@using BuisnessLogicLayer.Projects
@using BuisnessLogicLayer.Users

@inject ProjectService ProjectService
@inject AuthenticationStateProvider AuthenticationState
@inject IDialogService DialogService

<div class="top-buttons">
    <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large">
        <MudButton OnClick="RefreshProjectsListAsync" StartIcon="@Icons.Filled.Refresh">
            Refresh
        </MudButton>
        <MudButton OnClick="AddProjectAsync" StartIcon="@Icons.Filled.Add">
            Create
        </MudButton>
    </MudButtonGroup>
</div>

<div class="project-cards-container">
    @if (_currentUserId > 0 && _projects != null)
    {
        foreach (var project in _projects)
        {
            <ProjectCard Project="@project" OnProjectDeleted="RefreshProjectsListAsync" />
        }
    }
</div>

@code {
    private int _currentUserId;
    private IEnumerable<Project> _projects = null!;

    protected async override Task OnInitializedAsync()
    {
        await RefreshProjectsListAsync();
    }

    private async Task RefreshProjectsListAsync()
    {
        string userIdString = null!;

        try
        {
            AuthenticationState state = await AuthenticationState.GetAuthenticationStateAsync();
            userIdString = state?.User?.FindFirst("Id")?.Value ?? string.Empty;
        }
        catch (InvalidOperationException)
        {
            await ShowErrorMessageAsync();
            return;
        }

        if (!int.TryParse(userIdString, out _currentUserId))
        {
            await ShowErrorMessageAsync();
            return;
        }

        try
        {
            _projects = ProjectService.GetUserProjects(_currentUserId);
        }
        catch (InvalidOperationException)
        {
            await ShowErrorMessageAsync();
        }
    }

    private async Task AddProjectAsync()
    {
        var dialog = DialogService.Show<ProjectAdding_Dialog>("Adding new project");
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await RefreshProjectsListAsync();
        }
    }

    private async Task ShowErrorMessageAsync()
    {
        string messageBoxTitle = "Failed to refresh users list.";
        string messageBoxText = "Try to update page.";
        await DialogService.ShowMessageBox(messageBoxTitle, messageBoxText);
    }
}